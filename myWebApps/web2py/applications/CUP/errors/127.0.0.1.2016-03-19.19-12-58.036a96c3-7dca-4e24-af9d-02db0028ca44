(dp1
S'output'
p2
S"<type 'exceptions.Exception'> Validation error, field:email <gluon.validators.IS_NOT_IN_DB object at 0x0000000006D09588>"
p3
sS'layer'
p4
S'C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\applications\\CUP\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Ciao utente !")\n    return dict(message=T(\'Benvenuto al CUP online!\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n#def popdb():\n#    from gluon.contrib.populate import populate\n#    populate(db.auth_user,2)    \n#    output = \'\'\n#    for User in db(db.auth_user.id>0).select(limitby=(0,9)):\n#        output = output + \' User:\' + User.email + \',\'+ User.first_name\n#    populate(db.Cliente,2)\n#    for Cliente in db(db.Cliente.id>0).select(limitby=(0,9)):\n#        output= output + \' Cliente:\' + Cliente.nome\n#    return output\n\nfrom gluon.contrib.populate import populate\ndef populate_db():\n    output = \'\'\n    output = output + _populate_db_table(\'auth_user\', db.auth_user, 2)    \n    output = output + _populate_db_table(\'Cliente\', db.Cliente, 2) \n    output = output + _populate_db_table(\'Fornitore\', db.Fornitore, 2)  \n    output = output + _populate_db_table(\'Categoria_servizio\', db.Categoria_servizio, 2)    \n    output = output + _populate_db_table(\'Servizio\', db.Servizio, 2)   \n    output = output + _populate_db_table(\'Servizio_disponibile\', db.Servizio_disponibile, 2)    \n    output = output + _populate_db_table(\'Stato_prestazione\', db.Stato_prestazione, 2)    \n    output = output + _populate_db_table(\'Prestazione\', db.Prestazione, 2)      \n    output = output + _populate_db_table(\'Soddisfazione\', db.Soddisfazione, 2)   \n    return output\n#metodo privato inizia con under score\ndef _populate_db_table(dbTableName, dbTable, numRows):\n    output = \'\'\n    populate(dbTable,numRows)    \n    for Entity in db(dbTable.id>0).select(limitby=(0,9)):\n        output = output + dbTableName + \': \' + str(Entity.id) + \'; \'\n    return output\n\ndef export_db():\n    filename = \'export.csv\'\n    db.export_to_csv_file(open(filename,\'wb\'))\n    open(\'Cliente.csv\',\'wb\').write(str(db(db.Cliente.id).select()))\n    return \'Export db to file \' + filename\n\ndef import_db():\n    filename = \'import.csv\'\n    db.import_from_csv_file(open(filename,\'rb\'))\n    return \'Import data from csv into DB\'\n\ndef export_db_table():\n    filename = \'export_table.csv\'\n    dbTable = db.Cliente\n    tablename = \'Cliente\'\n    open(filename,\'wb\').write(str(db(dbTable.id).select()))\n    return \'Export \' + tablename + \' from db to file \' + filename\n\n#NON FUNZIONA\ndef import_db_table():\n    filename = \'ClienteExcel.csv\'\n    db.import_from_csv_file(open(filename,\'rb\'))\n    return \'Import csv data from file \'+filename + \'into DB table\'\nresponse._vars=response._caller(user)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\applications\\CUP\\controllers/default.py", line 115, in <module>\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\applications\\CUP\\controllers/default.py", line 38, in user\n    return dict(form=auth())\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\gluon\\tools.py", line 1923, in __call__\n    return getattr(self, args[0])()\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\gluon\\tools.py", line 3343, in register\n    hideerror=self.settings.hideerror):\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\gluon\\sqlhtml.py", line 1505, in accepts\n    **kwargs\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\gluon\\html.py", line 2122, in accepts\n    status = self._traverse(status, hideerror)\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\gluon\\html.py", line 888, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\gluon\\html.py", line 888, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\gluon\\html.py", line 888, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\gluon\\html.py", line 888, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\gluon\\html.py", line 895, in _traverse\n    newstatus = self._validate()\n  File "C:\\Users\\Administrator.DATASCIENCEVM\\Dropbox\\______________myDevProjects\\myWebApps\\myWebApps\\web2py\\gluon\\html.py", line 1863, in _validate\n    raise Exception(msg)\nException: Validation error, field:email <gluon.validators.IS_NOT_IN_DB object at 0x0000000006D09588>\n'
p11
s.